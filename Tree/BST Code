import java.util.LinkedList;
import java.util.Queue;

public class BSTimplementation {

    // Node class representing a node in the binary tree
    static class Node {
        int data;
        Node left;
        Node right;

        Node(int data) {
            this.data = data;
            this.left = null;
            this.right = null;
        }
    }

    // BinaryTree class containing methods to build and traverse the binary tree
    static class BinaryTree {
        static int idx = -1;

        // Recursive method to build a binary tree from an array representation
        public static Node buildTree(int nodes[]) {
            idx++;
            if (nodes[idx] == -1)
                return null;
            Node newNode = new Node(nodes[idx]);
            newNode.left = buildTree(nodes);
            newNode.right = buildTree(nodes);
            return newNode;
        }
    }

    // Method to perform preorder traversal (Root -> Left -> Right)
    public static void preorder(Node root) {
        if (root == null)
            return;
        System.out.print(root.data + " ");
        preorder(root.left);
        preorder(root.right);
    }

    // Method to perform inorder traversal (Left -> Root -> Right)
    public static void inorder(Node root) {
        if (root == null)
            return;
        inorder(root.left);
        System.out.print(root.data + " ");
        inorder(root.right);
    }

    // Method to perform postorder traversal (Left -> Right -> Root)
    public static void postorder(Node root) {
        if (root == null)
            return;
        postorder(root.left);
        postorder(root.right);
        System.out.print(root.data + " ");
    }

    // Method to perform level order traversal (Breadth-First Search)
    public static void levelorder(Node root) {
        if (root == null) {
            return;
        }
        Queue<Node> q = new LinkedList<>();
        q.add(root);
        q.add(null);
        while (!q.isEmpty()) {
            Node curr = q.remove();
            if (curr == null) {
                System.out.println(); // Move to the next level
                if (q.isEmpty()) {
                    break;
                } else {
                    q.add(null); // Add marker for the end of the next level
                }
            } else {
                System.out.print(curr.data + " "); // Print current node's data
                if (curr.left != null) {
                    q.add(curr.left); // Enqueue left child
                }
                if (curr.right != null) {
                    q.add(curr.right); // Enqueue right child
                }
            }
        }
    }

    // Main method to test the binary tree implementation
    public static void main(String args[]) {
        int nodes[] = {1, 2, 4, -1, -1, 5, -1, -1, 3, -1, 6, -1, -1};

        BinaryTree tree = new BinaryTree();
        Node root = tree.buildTree(nodes); // Build the binary tree from the array

        System.out.println(root.data); // Print the root element
        preorder(root); // Print preorder traversal
        inorder(root); // Print inorder traversal
        postorder(root); // Print postorder traversal
        levelorder(root); // Print level order traversal
    }
}
